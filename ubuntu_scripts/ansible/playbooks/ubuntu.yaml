---
- hosts: all
  remote_user: bruno
  become: true
  tasks:
    - name: "Update and upgrade all packages to the latest version"
      ansible.builtin.apt:
        update_cache: true
        upgrade: dist
        cache_valid_time: 3600

    - name: "Install required packages"
      ansible.builtin.apt:
        pkg:
          - apt-transport-https
          - ca-certificates
          - curl
          - vim
          - gnupg
          - software-properties-common
          - net-tools
          - htop

    - name: "Create directory for Docker's GPG key"
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: "Add Docker's official GPG key"
      ansible.builtin.apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        keyring: /etc/apt/keyrings/docker.gpg
        state: present

    - name: "Print architecture variables"
      ansible.builtin.debug:
        msg: "Architecture: {{ ansible_architecture }}, Codename: {{ ansible_lsb.codename }}"

    - name: "Add Docker repository"
      ansible.builtin.apt_repository:
        repo: >-
          deb [arch={{ arch_mapping[ansible_architecture] | default(ansible_architecture) }}
          signed-by=/etc/apt/keyrings/docker.gpg]
          https://download.docker.com/linux/ubuntu {{ ansible_lsb.codename }} stable
        filename: docker
        state: present

    - name: "Install Docker and related packages"
      ansible.builtin.apt:
        name: "{{ item }}"
        state: present
        update_cache: true
      loop:
        - docker-ce
        - docker-ce-cli
        - containerd.io
        - docker-buildx-plugin
        - docker-compose-plugin

    - name: "Add Docker group"
      ansible.builtin.group:
        name: docker
        state: present

    - name: "Add user to Docker group"
      ansible.builtin.user:
        name: "{{ ansible_user }}"
        groups: docker
        append: true

    - name: "Enable and start Docker services"
      ansible.builtin.systemd:
        name: "{{ item }}"
        enabled: true
        state: started
      loop:
        - docker.service
        - containerd.service

    ### NAS Directory Configuration
    - name: "Create directory to NAS Mount"
      ansible.builtin.file:
        path: /mnt/zimacube
        state: directory
        mode: '0755'

    - name: "Copy credential file to Server"
      ansible.builtin.copy:
        src: "{{ inventory_dir }}/{{ item }}"
        dest: /home/{{ ansible_user }}/{{ item }}
      loop:
      - .credentials

    - name: "Install required packages"
      ansible.builtin.apt:
        pkg:
          - cifs-utils

    - name: Check if resolv.conf file exists
      stat:
          path: /etc/resolv.conf
      register: file_info

    - name: Create /etc/resolv.conf if it exists
      file:
        path: /etc/resolv.conf
        state: touch
      when: not file_info.stat.exists

    - name: Set DNS nameservers in /etc/resolv.conf
      blockinfile:
          path: /etc/resolv.conf
          block: |
                nameserver 8.8.8.8
                nameserver 8.8.4.4

    ## https://dubnik.wordpress.com/2020/03/31/how-to-mount-cifs-ansible/
    - name: "Mount NAS Directory"
      mount:
        state: "mounted"
        fstype: "cifs"
        name: /mnt/zimacube/
        src: "//192.168.0.190/Bruno"
        opts: "credentials=/home/bruno/.credentials,file_mode=0644,dir_mode=0755,gid=bruno,uid=bruno"

    # - name: Unmount
    #   mount:
    #     path: /mnt/zimacube/
    #     state: unmounted

    ### Copy Compose files and Start them
    - name: "Copy Portainer Docker Compose files"
      ansible.builtin.copy:
        src: "{{ inventory_dir }}/docker/{{ item }}"
        dest: /home/{{ ansible_user }}/{{ item }}
      loop:
      - media-compose.yaml
      - utils-compose.yaml

    - name: "Deploy Media Docker Compose stack"
      community.docker.docker_compose_v2:
        project_name: media
        project_src: /home/{{ ansible_user }}
        remove_orphans: true
        files:
        - media-compose.yaml

    - name: "Deploy Utils Docker Compose stack"
      community.docker.docker_compose_v2:
        project_name: utils
        project_src: /home/{{ ansible_user }}
        remove_orphans: true
        files:
        - utils-compose.yaml
